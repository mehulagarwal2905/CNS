# Basic AES Implementation in Python
# ‚ö†Ô∏è For learning only, not for production use ‚ö†Ô∏è

import base64


SBOX = [
0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76,
0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0,
0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15,
0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75,
0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84,
0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf,
0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8,
0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2,
0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73,
0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb,
0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79,
0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08,
0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a,
0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e,
0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf,
0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16]

INV_SBOX = [
0x52,0x09,0x6a,0xd5,0x30,0x36,0xa5,0x38,0xbf,0x40,0xa3,0x9e,0x81,0xf3,0xd7,0xfb,
0x7c,0xe3,0x39,0x82,0x9b,0x2f,0xff,0x87,0x34,0x8e,0x43,0x44,0xc4,0xde,0xe9,0xcb,
0x54,0x7b,0x94,0x32,0xa6,0xc2,0x23,0x3d,0xee,0x4c,0x95,0x0b,0x42,0xfa,0xc3,0x4e,
0x08,0x2e,0xa1,0x66,0x28,0xd9,0x24,0xb2,0x76,0x5b,0xa2,0x49,0x6d,0x8b,0xd1,0x25,
0x72,0xf8,0xf6,0x64,0x86,0x68,0x98,0x16,0xd4,0xa4,0x5c,0xcc,0x5d,0x65,0xb6,0x92,
0x6c,0x70,0x48,0x50,0xfd,0xed,0xb9,0xda,0x5e,0x15,0x46,0x57,0xa7,0x8d,0x9d,0x84,
0x90,0xd8,0xab,0x00,0x8c,0xbc,0xd3,0x0a,0xf7,0xe4,0x58,0x05,0xb8,0xb3,0x45,0x06,
0xd0,0x2c,0x1e,0x8f,0xca,0x3f,0x0f,0x02,0xc1,0xaf,0xbd,0x03,0x01,0x13,0x8a,0x6b,
0x3a,0x91,0x11,0x41,0x4f,0x67,0xdc,0xea,0x97,0xf2,0xcf,0xce,0xf0,0xb4,0xe6,0x73,
0x96,0xac,0x74,0x22,0xe7,0xad,0x35,0x85,0xe2,0xf9,0x37,0xe8,0x1c,0x75,0xdf,0x6e,
0x47,0xf1,0x1a,0x71,0x1d,0x29,0xc5,0x89,0x6f,0xb7,0x62,0x0e,0xaa,0x18,0xbe,0x1b,
0xfc,0x56,0x3e,0x4b,0xc6,0xd2,0x79,0x20,0x9a,0xdb,0xc0,0xfe,0x78,0xcd,0x5a,0xf4,
0x1f,0xdd,0xa8,0x33,0x88,0x07,0xc7,0x31,0xb1,0x12,0x10,0x59,0x27,0x80,0xec,0x5f,
0x60,0x51,0x7f,0xa9,0x19,0xb5,0x4a,0x0d,0x2d,0xe5,0x7a,0x9f,0x93,0xc9,0x9c,0xef,
0xa0,0xe0,0x3b,0x4d,0xae,0x2a,0xf5,0xb0,0xc8,0xeb,0xbb,0x3c,0x83,0x53,0x99,0x61,
0x17,0x2b,0x04,0x7e,0xba,0x77,0xd6,0x26,0xe1,0x69,0x14,0x63,0x55,0x21,0x0c,0x7d]

RCON = [0x8d,0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1b,0x36]



def pad(data, block_size=16):
    n = block_size - (len(data) % block_size)
    return data + bytes([n]*n)

def unpad(data):
    return data[:-data[-1]]

def print_state(label, state):
    print(f"{label}:")
    for i in range(4):
        print(" ".join(f"{b:02x}" for b in state[i*4:(i+1)*4]))
    print()

def encrypt_block_verbose(inp, key):
    state = list(inp)
    w = key_expansion(key)
    print_state("Initial AddRoundKey", state)
    state = add_round_key(state, w[:16])
    print_state("After Round 0 AddRoundKey", state)
    
    for r in range(1, 10):
        state = sub_bytes(state)
        print_state(f"After Round {r} SubBytes", state)
        state = shift_rows(state)
        print_state(f"After Round {r} ShiftRows", state)
        state = mix_columns(state)
        print_state(f"After Round {r} MixColumns", state)
        state = add_round_key(state, w[16*r:16*(r+1)])
        print_state(f"After Round {r} AddRoundKey", state)
    
    state = sub_bytes(state)
    print_state("After Round 10 SubBytes", state)
    state = shift_rows(state)
    print_state("After Round 10 ShiftRows", state)
    state = add_round_key(state, w[160:176])
    print_state("After Round 10 AddRoundKey (Ciphertext)", state)
    
    return bytes(state)

def decrypt_block_verbose(ct, key):
    state = list(ct)
    w = key_expansion(key)
    print_state("Initial AddRoundKey (Ciphertext)", state)
    state = add_round_key(state, w[160:176])
    print_state("After Initial AddRoundKey", state)
    
    for r in range(9,0,-1):
        state = inv_shift_rows(state)
        print_state(f"After Round {r} InvShiftRows", state)
        state = inv_sub_bytes(state)
        print_state(f"After Round {r} InvSubBytes", state)
        state = add_round_key(state, w[16*r:16*(r+1)])
        print_state(f"After Round {r} AddRoundKey", state)
        state = inv_mix_columns(state)
        print_state(f"After Round {r} InvMixColumns", state)
    
    state = inv_shift_rows(state)
    print_state("After Round 0 InvShiftRows", state)
    state = inv_sub_bytes(state)
    print_state("After Round 0 InvSubBytes", state)
    state = add_round_key(state, w[:16])
    print_state("After Round 0 AddRoundKey (Decrypted)", state)
    
    return bytes(state)

def sub_bytes(s): return [SBOX[b] for b in s]
def inv_sub_bytes(s): return [INV_SBOX[b] for b in s]

def shift_rows(s):
    return [s[0],s[5],s[10],s[15],
            s[4],s[9],s[14],s[3],
            s[8],s[13],s[2],s[7],
            s[12],s[1],s[6],s[11]]

def inv_shift_rows(s):
    return [s[0],s[13],s[10],s[7],
            s[4],s[1],s[14],s[11],
            s[8],s[5],s[2],s[15],
            s[12],s[9],s[6],s[3]]

def xtime(a): return ((a<<1)^0x1b) & 0xff if (a&0x80) else (a<<1)
def gmul(a,b):
    p=0
    for _ in range(8):
        if b&1: p^=a
        a=xtime(a); b>>=1
    return p

def mix_columns(s):
    out=[0]*16
    for c in range(4):
        col=s[c*4:(c+1)*4]
        out[c*4+0]=gmul(col[0],2)^gmul(col[1],3)^col[2]^col[3]
        out[c*4+1]=col[0]^gmul(col[1],2)^gmul(col[2],3)^col[3]
        out[c*4+2]=col[0]^col[1]^gmul(col[2],2)^gmul(col[3],3)
        out[c*4+3]=gmul(col[0],3)^col[1]^col[2]^gmul(col[3],2)
    return out

def inv_mix_columns(s):
    out=[0]*16
    for c in range(4):
        col=s[c*4:(c+1)*4]
        out[c*4+0]=gmul(col[0],14)^gmul(col[1],11)^gmul(col[2],13)^gmul(col[3],9)
        out[c*4+1]=gmul(col[0],9)^gmul(col[1],14)^gmul(col[2],11)^gmul(col[3],13)
        out[c*4+2]=gmul(col[0],13)^gmul(col[1],9)^gmul(col[2],14)^gmul(col[3],11)
        out[c*4+3]=gmul(col[0],11)^gmul(col[1],13)^gmul(col[2],9)^gmul(col[3],14)
    return out

def add_round_key(s,rk): return [b^rk[i] for i,b in enumerate(s)]

def key_expansion(key):
    Nk, Nb, Nr = 4,4,10
    w=[list(key[i*4:(i+1)*4]) for i in range(Nk)]
    for i in range(Nk,Nb*(Nr+1)):
        temp=w[i-1][:]
        if i%Nk==0:
            temp=temp[1:]+temp[:1]
            temp=[SBOX[b] for b in temp]
            temp[0]^=RCON[i//Nk]
        w.append([w[i-Nk][j]^temp[j] for j in range(4)])
    return sum(w,[])

def encrypt_block(inp,key):
    state=list(inp)
    w=key_expansion(key)
    state=add_round_key(state,w[:16])
    for r in range(1,10):
        state=sub_bytes(state)
        state=shift_rows(state)
        state=mix_columns(state)
        state=add_round_key(state,w[16*r:16*(r+1)])
    state=sub_bytes(state)
    state=shift_rows(state)
    state=add_round_key(state,w[160:176])
    return bytes(state)

def decrypt_block(ct,key):
    state=list(ct)
    w=key_expansion(key)
    state=add_round_key(state,w[160:176])
    for r in range(9,0,-1):
        state=inv_shift_rows(state)
        state=inv_sub_bytes(state)
        state=add_round_key(state,w[16*r:16*(r+1)])
        state=inv_mix_columns(state)
    state=inv_shift_rows(state)
    state=inv_sub_bytes(state)
    state=add_round_key(state,w[:16])
    return bytes(state)

# Example
# üîπ Dynamic input
msg = input("Enter plaintext: ").encode()
key = input("Enter key: ").encode()
key = (key + b" " * 16)[:16]

# Pad message
msg_padded = pad(msg)

# Encrypt verbose
print("\n=== Encryption Steps ===\n")
ct = b''
for i in range(0, len(msg_padded), 16):
    ct += encrypt_block_verbose(msg_padded[i:i+16], key)

# Decrypt verbose
print("\n=== Decryption Steps ===\n")
dt = b''
for i in range(0, len(ct), 16):
    dt += decrypt_block_verbose(ct[i:i+16], key)

# Unpad decrypted text
dt = unpad(dt)

print("\n=== Summary ===")
print("Pawan Mohit 160123749301")
print("Key       :", key.decode(errors='ignore'))
print("Plaintext :", msg.decode())
print("Ciphertext (base64):", base64.b64encode(ct).decode())
print("Decrypted :", dt.decode())